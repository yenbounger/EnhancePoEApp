<UserControl x:Class="ChaosRecipeEnhancer.UI.UserControls.SettingsForms.GeneralForms.GeneralForm"
             x:ClassModifier="internal"
             xmlns:generalForms="clr-namespace:ChaosRecipeEnhancer.UI.UserControls.SettingsForms.GeneralForms"
             xmlns:zemotoCommon="clr-namespace:ChaosRecipeEnhancer.UI.Utilities.ZemotoCommon"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
             xmlns:xctk="http://schemas.xceed.com/wpf/xaml/toolkit"
             xmlns:system="clr-namespace:System;assembly=System.Runtime"
             Background="#202020"
             Loaded="OnLoaded"
             mc:Ignorable="d"
             d:DataContext="{d:DesignInstance Type=generalForms:GeneralFormViewModel}">

    <UserControl.Resources>
        <zemotoCommon:BoolVisibilityConverter x:Key="BoolVisibilityConverter" CollapseWhenNotVisible="True" />
        <zemotoCommon:BoolVisibilityConverter x:Key="InvertedBoolVisibilityConverter" CollapseWhenNotVisible="True" Invert="True" />
        <zemotoCommon:EqualityToVisibilityConverter x:Key="VisibleIfEqual" ComparisonType="{x:Type system:Int32}" />
        <zemotoCommon:InvertBoolConverter x:Key="InvertBoolConverter" />
    </UserControl.Resources>

    <Grid
        Margin="10"
        ShowGridLines="False">

        <Grid.ColumnDefinitions>
            <ColumnDefinition Width="Auto" />
            <ColumnDefinition Width="Auto" />
        </Grid.ColumnDefinitions>
        <Grid.RowDefinitions>
            <RowDefinition Height="Auto" />
            <RowDefinition Height="Auto" />
            <RowDefinition Height="Auto" />
            <RowDefinition Height="Auto" />
            <RowDefinition Height="Auto" />
            <RowDefinition Height="Auto" />
            <RowDefinition Height="Auto" />           
            <RowDefinition Height="Auto" />
        </Grid.RowDefinitions>

        <TextBlock
            Grid.Column="0"
            Grid.Row="0"
            Grid.ColumnSpan="2"
            Margin="0 0 0 10"
            VerticalAlignment="Center"
            Text="General"
            FontSize="24" />

        <!-- League Selection Start -->
        <TextBlock
            Grid.Column="0"
            Grid.Row="1"
            Margin="0 0 0 10"
            VerticalAlignment="Center"
            Text="League:"
            ToolTipService.InitialShowDelay="50"
            ToolTip="The league you are playing in." />

        <Grid
            Grid.Column="1"
            Grid.Row="1"
            Margin="10 0 0 10">

            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="Auto" />
                <ColumnDefinition Width="Auto" />
                <ColumnDefinition Width="Auto" />
                <ColumnDefinition Width="Auto" />
            </Grid.ColumnDefinitions>
            <Grid.RowDefinitions>
                <RowDefinition Height="Auto" />
            </Grid.RowDefinitions>

            <TextBox
                Grid.Column="0"
                Grid.Row="0"
                Grid.ColumnSpan="4"
                Width="190"
                Text="{Binding Settings.LeagueName, Mode=TwoWay}"
                Visibility="{Binding Settings.CustomLeagueEnabled, Converter={StaticResource BoolVisibilityConverter}}" />

            <ComboBox
                Grid.Column="0"
                Grid.Row="0"
                Grid.ColumnSpan="3"
                Width="130"
                Margin="0 0 5 0"
                VerticalContentAlignment="Center"
                IsSynchronizedWithCurrentItem="True"
                ItemsSource="{Binding LeagueList, Mode=OneWay}"
                SelectedItem="{Binding Settings.LeagueName, Mode=TwoWay}"
                Visibility="{Binding Settings.CustomLeagueEnabled, Converter={StaticResource InvertedBoolVisibilityConverter}}" />

            <Button
                x:Name="RefreshLeaguesButton"
                Grid.Column="3"
                Grid.Row="0"
                Width="60"
                Margin="5 0 0 0"
                HorizontalContentAlignment="Center"
                Content="Refresh"
                Click="OnRefreshLeaguesButtonClicked"
                Visibility="{Binding Settings.CustomLeagueEnabled, Converter={StaticResource InvertedBoolVisibilityConverter}}" />

        </Grid>
        <!-- League Selection End -->

        <!-- Custom League Checkbox Start -->
        <TextBlock
            Grid.Column="0"
            Grid.Row="2"
            Margin="0 0 0 10"
            VerticalAlignment="Center"
            Text="Custom League:"
            ToolTipService.InitialShowDelay="50"
            ToolTip="If you are playing in a custom league, check this box to input the league name manually." />

        <CheckBox
            Grid.Column="1"
            Grid.Row="2"
            Margin="10 0 0 10"
            VerticalAlignment="Center"
            IsChecked="{Binding Settings.CustomLeagueEnabled, Mode=TwoWay}" />
        <!-- Custom League Checkbox Start -->

        <!-- Stash Tab Query Mode Selector Start -->
        <TextBlock
            Grid.Column="0"
            Grid.Row="3"
            Margin="0 0 0 10"
            VerticalAlignment="Center"
            Text="Stash Tab Query Mode:"
            ToolTip="The stash tab fetching mode. Stash tabs will automatically be added." />

        <ComboBox
            Grid.Column="1"
            Grid.Row="3"
            Margin="10 0 0 10"
            MinWidth="200"
            VerticalContentAlignment="Center"
            SelectedIndex="{Binding Settings.StashTabQueryMode, Mode=TwoWay}">

            <ComboBoxItem Content="Select Tabs From List" />
            <ComboBoxItem Content="Tab Name Prefix" />

        </ComboBox>
        <!-- Stash Tab Query Mode Selector Start -->

        <!-- Select Tab From List Start -->
        <TextBlock Grid.Column="0"
                   Grid.Row="4"
                   Margin="0 0 0 10"
                   VerticalAlignment="Center"
                   Text="Select Stash Tabs:"
                   Visibility="{Binding Settings.StashTabQueryMode, Converter={StaticResource VisibleIfEqual}, ConverterParameter=0}" />

        <Grid
            Grid.Column="1"
            Grid.Row="4"
            Margin="10 0 0 10">

            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="Auto" />
                <ColumnDefinition Width="Auto" />
                <ColumnDefinition Width="Auto" />
                <ColumnDefinition Width="Auto" />
                <ColumnDefinition Width="Auto" />
            </Grid.ColumnDefinitions>
            <Grid.RowDefinitions>
                <RowDefinition Height="Auto" />
            </Grid.RowDefinitions>

            <xctk:CheckComboBox
                Grid.Column="0"
                Grid.Row="0"
                Grid.ColumnSpan="4"
                Margin="0 0 5 0"
                Width="150"
                IsSelectAllActive="True"
                SelectAllContent="Select All / Clear All"
                MaxDropDownHeight="300"
                ItemSelectionChanged="OnStashTabSelectionChanged"
                SelectedItemsOverride="{Binding Path=SelectedStashTabs, UpdateSourceTrigger=PropertyChanged, Mode=TwoWay}"
                ItemsSource="{Binding StashTabIndexNameFullList}"
                ValueMemberPath="Index"
                VerticalContentAlignment="Center"
                HorizontalAlignment="Center"
                VerticalAlignment="Center">

                <xctk:CheckComboBox.Resources>
                    <Style TargetType="{x:Type CheckBox}">
                        <Setter Property="Background" Value="White" />
                    </Style>
                    <Style TargetType="{x:Type xctk:SelectAllSelectorItem}">
                        <Setter Property="Background" Value="#202020" />
                    </Style>
                </xctk:CheckComboBox.Resources>

                <xctk:CheckComboBox.ItemTemplate>
                    <DataTemplate>
                        <TextBlock Text="{Binding}" Foreground="#202020" />
                    </DataTemplate>
                </xctk:CheckComboBox.ItemTemplate>

            </xctk:CheckComboBox>

            <Button
                x:Name="FetchStashTabsButton"
                Grid.Column="4"
                Grid.Row="0"
                Width="40"
                Margin="5 0 0 0"
                Content="Fetch"
                IsEnabled="{Binding FetchingStashTabs, Converter={StaticResource InvertBoolConverter}}"
                Click="OnFetchStashTabsButtonClicked" />

        </Grid>
        <!-- Select Tab From List End -->

        <!-- Individual Stash Tab Name Prefix Start -->
        <TextBlock
            Grid.Column="0"
            Grid.Row="4"
            Margin="0 0 0 10"
            VerticalAlignment="Center"
            Text="Stash Tab Prefix:"
            ToolTip="Every stash tab which name starts with this prefix will be added."
            Visibility="{Binding Settings.StashTabQueryMode, Converter={StaticResource VisibleIfEqual}, ConverterParameter=1}" />

        <TextBox
            Grid.Column="1"
            Grid.Row="4"
            Margin="10 0 0 10"
            Visibility="{Binding Settings.StashTabQueryMode, Converter={StaticResource VisibleIfEqual}, ConverterParameter=1}"
            Text="{Binding Settings.StashTabPrefix, Mode=TwoWay}" />
        <!-- Individual Stash Tab Name Prefix End -->

        <!-- Fetch on New Map Setting Start -->
        <!-- TODO: [Refactor] Enforce reload when this setting is changed (or at the very least, notify users it's required) -->
        <TextBlock
            Grid.Column="0"
            Grid.Row="5"
            Margin="0 0 0 10"
            VerticalAlignment="Center"
            Text="Fetch on New Map:"
            ToolTip="Automatically fetches when you join a new Zone (Hideout excluded). REOPEN the overlay to take effect." />

        <CheckBox
            Grid.Column="1"
            Grid.Row="5"
            Margin="10 0 0 10"
            VerticalAlignment="Center"
            IsChecked="{Binding Settings.AutoFetchOnRezoneEnabled, Mode=TwoWay}" />
        <!-- Fetch on New Map Setting End -->

        <!-- Client Log File Location Setting (Row 13) Start -->
        <TextBlock
            Grid.Column="0"
            Grid.Row="6"
            VerticalAlignment="Center"
            Text="PoE Client.txt Path:"
            Visibility="{Binding Settings.AutoFetchOnRezoneEnabled, Converter={StaticResource BoolVisibilityConverter}}"
            ToolTip="The standard path is: `C:/Programs/Grinding Gear Games/Path of Exile/logs/Client.txt`; it will be different for steam users." />

        <Button
            x:Name="LogLocationDialog"
            Grid.Column="1"
            Grid.Row="6"
            Margin="10 0 0 0"
            Width="200"
            Click="LogLocationDialog_Click"
            Visibility="{Binding Settings.AutoFetchOnRezoneEnabled, Converter={StaticResource BoolVisibilityConverter}}"
            ToolTip="{Binding Settings.PathOfExileClientLogLocation, Mode=TwoWay}"
            ToolTipService.InitialShowDelay="50"
            Content="{Binding Settings.PathOfExileClientLogLocation, Mode=TwoWay}"
            HorizontalContentAlignment="Left">

            <Button.Style>
                <Style TargetType="Button">
                    <Setter
                        Property="Background"
                        Value="Transparent" />
                    <Style.Triggers>
                        <Trigger
                            Property="IsMouseOver"
                            Value="True">
                            <Setter
                                Property="Background"
                                Value="Transparent" />
                        </Trigger>
                    </Style.Triggers>
                </Style>
            </Button.Style>
        </Button>
        <!-- Enable Sounds Checkbox Start -->
        <TextBlock
            Grid.Column="0"
            Grid.Row="7"
            Margin="0 0 0 10"
            VerticalAlignment="Center"
            Text="Enable Sounds:"
            ToolTipService.InitialShowDelay="50"
            ToolTip="Enables sounds when your loot filter needs to refresh, or when you take a full set from your stash tab." />

        <CheckBox
            Grid.Column="1"
            Grid.Row="7"
            Margin="10 0 0 10"
            VerticalAlignment="Center"
            IsChecked="{Binding Settings.SoundEnabled, Mode=TwoWay}" />
        <!-- Enable Sounds Checkbox Start -->
    </Grid>
</UserControl>